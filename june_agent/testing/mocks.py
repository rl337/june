# june_agent/testing/mocks.py
from typing import Any, Callable, Dict, Optional
from june_agent.request import APIRequest # The interface it implements

class MockRequest(APIRequest):
    """
    A mock implementation of the `APIRequest` interface, designed for testing.

    This mock allows for configurable responses based on specific prompts,
    a default response, or a dynamic response generated by a provided function.
    It also tracks the last prompt received and the number of times `execute` was called,
    which can be useful for assertions in unit tests.
    """
    def __init__(self, default_response: str = "Default mock response"):
        """
        Initializes the MockRequest.
        Args:
            default_response: The response to return if no specific response or
                              response function is matched for a given prompt.
        """
        super().__init__() # Call to parent ABC __init__ (if any specific logic there)

        # Stores specific responses keyed by the exact prompt string.
        self.prompt_responses: Dict[str, str] = {}

        # The default response string to use if no other match is found.
        self.default_response: str = default_response

        # An optional function that can generate a response dynamically based on the prompt.
        self.response_function: Optional[Callable[[str], str]] = None

        # Stores the last prompt passed to the execute method.
        self.last_prompt_received: Optional[str] = None

        # Counts how many times the execute method has been called.
        self.call_count: int = 0

    def set_response_for_prompt(self, prompt: str, response: str) -> None:
        """
        Configures the mock to return a specific `response` string when
        the `execute` method is called with an exactly matching `prompt` string.
        Args:
            prompt: The exact prompt string to match.
            response: The response string to return for this prompt.
        """
        self.prompt_responses[prompt] = response

    def set_response_function(self, func: Callable[[str], str]) -> None:
        """
        Sets a custom function that will be called to generate a response
        when `execute` is called. The function will receive the prompt string.
        If set, this function is used if no exact prompt match is found in `prompt_responses`.
        Args:
            func: A callable that accepts a prompt string and returns a response string.
        """
        self.response_function = func

    def execute(self, prompt: str) -> str:
        """
        Simulates executing an API request.

        Order of response determination:
        1. If `prompt` matches a key in `self.prompt_responses`, that specific response is returned.
        2. If `self.response_function` is set, it's called with `prompt` to get the response.
        3. Otherwise, `self.default_response` is returned.

        This method also records the `prompt` and increments `call_count`.

        Args:
            prompt: The prompt string for the "API call".

        Returns:
            A string representing the mock API response.
        """
        """
        Executes the mock request.
        Returns a configured response if the prompt matches one set by `set_response_for_prompt`,
        or calls the function set by `set_response_function`,
        or returns the `default_response`.
        """
        self.last_prompt_received = prompt
        self.call_count += 1

        if prompt in self.prompt_responses:
            return self.prompt_responses[prompt]

        if self.response_function:
            return self.response_function(prompt)

        return self.default_response

    def get_last_prompt(self) -> Optional[str]:
        """Returns the last prompt string received by the `execute` method."""
        return self.last_prompt_received

    def get_call_count(self) -> int:
        """Returns the number of times the `execute` method has been called."""
        return self.call_count
